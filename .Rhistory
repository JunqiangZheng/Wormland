plot(Cerco.NMDS.bray)
#############################################
## customized NMDS
mds.fig <- ordiplot(Cerco.NMDS.bray, type = "none")
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=T)
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=F)
#Cerco.env$Treatment
#p05, p10 = plus
#n05,n10 = negative
points(mds.fig, "sites", pch = 19, col = "orange", select = Cerco.env$Treatment == "EW.p05")
points(mds.fig, "sites", pch = 19, col = "red", select = Cerco.env$Treatment == "EW.p10")
points(mds.fig, "sites", pch = 19, col = "dodgerblue", select = Cerco.env$Treatment == "EW.n05")
points(mds.fig, "sites", pch = 19, col = "blue", select = Cerco.env$Treatment == "EW.n10")
plot(Cerco.NMDS.bray)
#############################################
## customized NMDS
mds.fig <- ordiplot(Cerco.NMDS.bray, type = "none")
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=T)
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=F)
#Cerco.env$Treatment
#p05, p10 = plus
#n05,n10 = negative
points(mds.fig, "sites", pch = 19, cex =1, col = "orange", select = Cerco.env$Treatment == "EW.p05")
points(mds.fig, "sites", pch = 19, col = "red", select = Cerco.env$Treatment == "EW.p10")
plot(Cerco.NMDS.bray)
#############################################
## customized NMDS
mds.fig <- ordiplot(Cerco.NMDS.bray, type = "none")
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=T)
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=F)
#Cerco.env$Treatment
#p05, p10 = plus
#n05,n10 = negative
points(mds.fig, "sites", pch = 17, col = "orange", select = Cerco.env$Treatment == "EW.p05")
legend(1.3, 0.85, legend="With worm + 5cm",
col=c("orange"), pch =17, cex=1.0, box.lty=0)
legend(legend="With worm + 5cm",
col=c("orange"), pch =17, cex=1.0, box.lty=0)
legend(1.3, 0.85, legend="With worm + 5cm",
col="orange", pch =17)
legend(1.3, 0.85, legend="With worm + 5cm",
col="orange", pch =17, cex=1.0, box.lty=0)
Cerco.env$Type
##################################################################################
## PERMANOVA
adonis(Cerco.spe ~ Treatment*Type, data=Cerco.env, permutations=999)
adonis(species ~ Forest*Depth*Worm, permutations=999)
adonis(species ~ Forest*Worm*Depth, permutations=999)
Cerco.spe
head(Cerco.spe)
View(Cerco.spe)
#############################################
## customized NMDS
mds.fig <- ordiplot(Cerco.NMDS.bray, type = "none")
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=T)
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=F)
#Cerco.env$Treatment
#p05, p10 = plus
#n05,n10 = negative
points(mds.fig, "sites", pch = 17, col = "orange", select = Cerco.env$Treatment == "EW.p05")
points(mds.fig, "sites", pch = 19, col = "red", select = Cerco.env$Treatment == "EW.p10")
points(mds.fig, "sites", pch = 19, col = "dodgerblue", select = Cerco.env$Treatment == "EW.n05")
points(mds.fig, "sites", pch = 19, col = "blue", select = Cerco.env$Treatment == "EW.n10")
View(Cerco.env)
Cerco.env$Type
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, Cerco.env, perm = 999))
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, data=(Forest,Worm,Depth), perm = 999))
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, data=(Forest*Worm*Depth), perm = 999))
Cerco.env
adonis(species ~ Forest*Worm*Depth, permutations=999)
Cerco.NMDS.bray<-metaMDS(species, dist="bray", k=3, trymax=100,wascores=TRUE, trace=TRUE, zero="add")
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, data=(Forest*Worm*Depth), perm = 999))
Cerco.NMDS.bray<-metaMDS(species, dist="bray", k=3, trymax=100,wascores=TRUE, trace=TRUE, zero="add")
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, data=(Forest*Worm*Depth), perm = 999))
Cerco.NMDS.bray
envfit(Cerco.NMDS.bray, data=(Forest*Worm*Depth), perm = 999)
?envfit
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=(Forest*Worm*Depth), perm = 999))
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=(Forest,Worm,Depth), perm = 999))
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=cbind(Forest,Worm,Depth), perm = 999))
ordiplot(Cerco.NMDS.bray, display="sites")
mds.fig <- ordiplot(Cerco.NMDS.bray, type = "none")
ordihull(Cerco.NMDS.bray,groups=cbind(Forest,Worm,Depth), draw="polygon",col="grey90",label=T)
ordihull(Cerco.NMDS.bray,groups=Forest), draw="polygon",col="grey90",label=T)
ordihull(Cerco.NMDS.bray,groups=Forest, draw="polygon",col="grey90",label=T)
plot(Cerco.NMDS.bray)
mds.fig <- ordiplot(Cerco.NMDS.bray, type = "none")
ordihull(Cerco.NMDS.bray,groups=Forest, draw="polygon",col="grey90",label=T)
plot(Cerco.NMDS.bray)
ordihull(Cerco.NMDS.bray,groups=as.factor(Forest), draw="polygon",col="grey90",label=T)
plot(Cerco.NMDS.bray)
ordihull(Cerco.NMDS.bray,groups=as.factor(Forest), draw="polygon",col="grey90",label=T)
ordihull(Cerco.NMDS.bray,groups=as.factor(Forest), draw="polygon",col="grey90",label=T, add = T)
par (mfrow = c(1,2))
# stressplot => draws Shepards stress plot, which is the relationship
# between real distances between samples in resulting m dimensional ordination
# solution, and their particular compositional dissimilarities
# expressed by selected dissimilarity measure.'
stressplot(Cerco.NMDS.bray)
# this function draws NMDS ordination diagram with sites
plot (Cerco.NMDS.bray, display = 'sites', type = 't', main = 'Goodness of fit')
# and this adds the points with size reflecting goodness of fit (bigger = worse fit)
points (Cerco.NMDS.bray, display = 'sites', cex = goodness (Cerco.NMDS.bray)*200)
##################################################################################
## PERMANOVA
adonis(Cerco.spe ~ Treatment*Type, data=Cerco.env, permutations=999)
## NMDS
Cerco.NMDS.bray<-metaMDS(Cerco.spe, dist="bray", k=3, trymax=100,wascores=TRUE, trace=TRUE, zero="add")
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, Cerco.env, perm = 999))
ordiplot(Cerco.NMDS.bray, display="sites")
adonis(species ~ Forest*Worm*Depth, permutations=999)
Cerco.NMDS.bray<-metaMDS(species, dist="bray", k=3, trymax=100,wascores=TRUE, trace=TRUE, zero="add")
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=cbind(Forest,Worm,Depth), perm = 999))
ordiplot(Cerco.NMDS.bray, display="sites")
ordiplot(Cerco.NMDS.bray)
d
##################################################################################
## PERMANOVA
adonis(Cerco.spe ~ Treatment*Type, data=Cerco.env, permutations=999)
## NMDS
Cerco.NMDS.bray<-metaMDS(Cerco.spe, dist="bray", k=3, trymax=100,wascores=TRUE, trace=TRUE, zero="add")
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, Cerco.env, perm = 999))
ordiplot(Cerco.NMDS.bray, display="sites")
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=cbind(Forest,Worm), perm = 999))
ordiplot(Cerco.NMDS.bray, display="sites")
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=Forest*Worm, perm = 999))
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=Forest,Depth, perm = 999))
###NMDS Plot
Cerco_env<-cbind(Forest,Worm,Depth)
View(Cerco_env)
###NMDS Plot
Cerco_env<-Ecoworm[,5:7]
View(Cerco_env)
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=Cerco_env, perm = 999))
ordiplot(Cerco.NMDS.bray, display="sites")
plot(Cerco.NMDS.bray)
mds.fig <- ordiplot(Cerco.NMDS.bray, type = "none")
ordihull(Cerco.NMDS.bray,groups=as.factor(Forest), draw="polygon",col="grey90",label=T)
plot(Cerco.NMDS.bray)
mds.fig <- ordiplot(Cerco.NMDS.bray, type = "none")
# plot just the samples, colour by habitat, pch=19 means plot a circle
ordihull(Cerco.NMDS.bray,groups=as.factor(Forest), draw="polygon",col="grey90",label=T)
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=F)
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=Forest*Worm*Depth, perm = 999))
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=cbind(Forest*Worm*Depth), perm = 999))
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=Cerco_env, perm = 999))
View(Cerco_env)
mds.fig <- ordiplot(Cerco.NMDS.bray, type = "none")
# plot just the samples, colour by habitat, pch=19 means plot a circle
ordihull(Cerco.NMDS.bray,groups=as.factor(Forest), draw="polygon",col="grey90",label=T)
ordihull(Cerco.NMDS.bray,groups=Cerco.env$Type, draw="polygon",col="grey90",label=F)
#Cerco.env$Treatment
#p05, p10 = plus
#n05,n10 = negative
points(mds.fig, "sites", pch = 17, col = "orange", select = Cerco.env$Treatment == "EW.p05")
points(mds.fig, "sites", pch = 19, col = "red", select = Cerco.env$Treatment == "EW.p10")
points(mds.fig, "sites", pch = 19, col = "dodgerblue", select = Cerco.env$Treatment == "EW.n05")
points(mds.fig, "sites", pch = 19, col = "blue", select = Cerco.env$Treatment == "EW.n10")
Cerco.env$treat.var2
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=Cerco_env, perm = 999))
###NMDS Plot
Cerco_env<-Ecoworm[,5:6]
(fit.Cerco.NMDS.bray <- envfit(Cerco.NMDS.bray, env=Cerco_env, perm = 999))
###NMDS Plot
Cerco_env<-Ecoworm[(,5)(,7)]
###NMDS Plot
Cerco_env<-Ecoworm[,5:7]
knitr::opts_chunk$set(echo = TRUE)
Ecoworm<-read.csv("D:\\Backup\\Projekte/Github/Wormland/EcoW-data-EVOP.csv", header=T, stringsAsFactors=TRUE, sep=";")
species <-Ecoworm[,9:ncol(Ecoworm)] ##definiere Artdaten; ncol(Ecoworm geht bis zur letzten Zeile durch)
Forest <- Ecoworm[,7]
Depth<- Ecoworm[,6]
Worm<-Ecoworm[,5]
boxplot(species, las=2) #las gibt die Formatierung der Namen
pc<-prcomp(t(species),scale=T, center = T)
pc_summary<-summary(pc)### die erste Achse erklärt 55% der Variation, die zweite nur noch 4, klarer Abbruch
plot(pc$x[,1:2])###hier plotte ich die ersten beiden Varianzen der pca, die X-Achse ist also die, die 55% der Variation erklärt. Der Faktor "x" im Code bezieht sich auf die Zeile der Liste "pc", die die Koordinaten für den Plot enthält
plot(pc$x[,1:2])  ###wichtig ist darauf zu achten, dass beide Befehle hier gleichzeitig ausgeführt werden
text(pc$x[,1:2], names(pc$x[,1]))
#Histograms
SubsetEcowormForestUSA = subset(species, "USA" == Ecoworm[,7])
SubsetEcowormForestUSA = as.matrix(SubsetEcowormForestUSA)
hist(SubsetEcowormForestUSA) ###many zeros means we have a lot of zeros, meaning that many OTUs were not present in the forest USA, nevertheless there were many abundant
##lets see the disprsal of a couple example OTUs
SubsetEcowormForestUSA = subset(species, "USA" == Ecoworm[,7])
SubsetEcowormForestUSA = subset(log(species+1), "USA" == Ecoworm[,7])### log(species+1), remember to add +1 to the data before log transforming, Zeros can not be log transformed
SubsetEcowormForestUSA = as.matrix(SubsetEcowormForestUSA)
hist(as.numeric(SubsetEcowormForestUSA[,100]), breaks=10)##breaks breaks the columns into more columns ### we see that in this graph OTU100 is in some samples not present (Zeros) and in others it is sometimes more frequent and sometimes less, nearly normally distributed
SubsetEcowormForestUSA = subset(species, "USA" == Ecoworm[,7])
SubsetEcowormForestUSA = subset(log(species+1), "USA" == Ecoworm[,7])### log(species+1), remember to add +1 to the data before log transforming, Zeros can not be log transformed
SubsetEcowormForestUSA = as.matrix(SubsetEcowormForestUSA)
hist(as.numeric(SubsetEcowormForestUSA[,1]), breaks=10)##breaks breaks the columns into more columns ### we see that in this graph OTU1 is nearly normally distributed
boxplot(log(species[,1]+1) ~ Ecoworm$Location) ###$Location is exactly the same as [,7] in Ecoworm or the "Forest" subsample, you could also type "~ Forest"
boxplot(log(species[,1]+1) ~ Ecoworm$Location+Depth) ###$Location is exactly the same as [,7] in Ecoworm or the "Forest" subsample, you could also type "~ Forest"
pca = prcomp(t(species_mat), scale. = T, center = T)
#See Bargraph of the variation of the dataset by PCA
species_mat<-as.matrix(species)
pca = prcomp(t(species_mat), scale. = T, center = T)
plot(pca)### probably only the first axis explains most of our variation in the data
plot(pca$rotation, col = c('red', 'blue', 'green')[unclass(Ecoworm$Location)], pch = 16, las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
levels(Ecoworm$Location),
col = c('red', 'blue', 'green'),
pch = 16,
bty = 'n')
levels(Ecoworm$Location)###I used this to get the levels of the location and to know which colour refers to what
plot(pca$rotation, col = c('red', 'blue', 'green')[unclass(Ecoworm$Location)], pch = 16, las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
levels(Ecoworm$Location),
col = c('red', 'blue', 'green'),
pch = 16,
bty = 'n')
levels(Ecoworm$Location)
#Make PCA for two factors, here location and depth
plot(pca$rotation, col = c('red', 'blue', 'green')[unclass(Ecoworm$Location)], pch = c(16,4)[unclass(Ecoworm$Worm)], las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
c(levels(Ecoworm$Location), levels(Ecoworm$Worm)),
col = c('red', 'blue', 'green', 'lightgreen', 'lightblue'),
pch = c(15,15,15,16,4), ####15,15,15, refer to the three levels of location, 16,4 refer to the two levels of worm presence.
bty = 'n')
#Make PCA for two factors, here location and depth
plot(pca$rotation, col = c('red', 'blue', 'green')[unclass(Ecoworm$Location)], pch = c(16,4)[unclass(Ecoworm$Worm)], las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
c(levels(Ecoworm$Location), levels(Ecoworm$Worm)),
col = c('red', 'blue', 'green', 'lightgreen', 'lightblue'),
pch = c(15,15,15,16,4), ####15,15,15, refer to the three levels of location, 16,4 refer to the two levels of worm presence.
bty = 'n')
require(rgl)
#Make 3D PCA for the data, label color in location, we can clearly see from this plot that our data is quite "flat", meaning that most of our variation lies in 1 axis
?rgl
rgl.open()
rgl.points(pca$rotation[,1],pca$rotation[,3],pca$rotation[,2],color = c('red', 'blue', 'green')[unclass(Ecoworm$Location)], size=10)
##Models ## lm is a simple linear model in R and it is exactly the same thing as an anova.
### since this is the anova and anova wants normal distribution you do this with the log transformed data
mod0<-lm((log(species$Otu001.Glissomonadida.Sandonidae.Sandonidae_X.sp.)+1)~ Ecoworm$Location)
##Models ## lm is a simple linear model in R and it is exactly the same thing as an anova.
### since this is the anova and anova wants normal distribution you do this with the log transformed data
mod0<-lm((log(species$Otu001.Glissomonadida.Sandonidae.Sandonidae_X.sp.)+1)~ Ecoworm$Location)
summary(mod0)###in average the abundance of OTU is 748 less in CAX than in CAK or 1700 less than in USA, sweet ### the same thing you can see when you make a boxplot of OTU1 in each of the locations
AIC(mod0)
boxplot((species[,1])~Forest)###here I boxplotted everything without the log to see the real difference in abundance
mod1<-lm((log(species$Otu001.Glissomonadida.Sandonidae.Sandonidae_X.sp.)+1)~ Ecoworm$Worm)
summary(mod1)
boxplot((species[,1])~Worm)
mod2<-lm((log(species$Otu001.Glissomonadida.Sandonidae.Sandonidae_X.sp.)+1)~ as.factor(Ecoworm$Depth))
summary(mod2)
boxplot((species[,1])~Depth)####Adjusted R-squared explains how much variation is explained by this specific variable, R swuare will alway increase with multiple factors,
AIC(mod2)### the AIC measures how wrong your model ist/how far you are from having the best model, the closer to 0 is better, the more factors you put the more it will increase, so take care to keep it "relatively low"
mod3<-lm((log(species$Otu001.Glissomonadida.Sandonidae.Sandonidae_X.sp.)+1)~ Ecoworm$Location+as.factor(Ecoworm$Depth)+Ecoworm$Worm)
summary(mod3)####having worms increases the amount of OTU1 in log0.32 in presence of the other variables, and since you read from the bottom to the top it would be when you have shallower sampling and under comparison to CAK
boxplot((species[,1])~Ecoworm$Location,Ecoworm$Worm,Ecoworm$Depth)
####
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1)##normalQ-Q shows us that the data is normally distributed along the line, cooks distance shows outliers, rule of thumb: values above ten are outliers, the other graphs show a variance into the positive or negative, if it is obviously dragged into one direction it should be weird, here everything looks sweet
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1)
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1, col=T)
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1, col=Ecoworm[,5:7])##normalQ-Q shows us that the data is normally distributed along the line, cooks distance shows outliers, rule of thumb: values above ten are outliers, the other graphs show a variance into the positive or negative, if it is obviously dragged into one direction it should be weird, here everything looks sweet
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1, col=Ecoworm[,5:7])
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1, colors=c("blue", "gold", "red"))
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1, col = c('red', 'blue', 'green'))##normalQ-Q shows us that the data is normally distributed along the line, coo
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1, col = c('blue', 'red', 'green'))##normalQ-Q shows us that the data
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1, col = c('deepink4', 'blue', 'darkslategray3'))##normalQ-Q shows us that the data is normally distribut
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1, col = c('deeppink4', 'blue', 'darkslategray3'))##normalQ-Q s
plot(pca$rotation, col = c('red', 'blue', 'green')[unclass(Ecoworm$Location)], pch = 16, las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
levels(Ecoworm$Location),
col = c('deeppink4', 'blue', 'darkslategray3'),
pch = 16,
bty = 'n')
levels(Ecoworm$Location)###I used this to get the levels of the location and to know which colour refers to what
plot(pca$rotation, col = c('red', 'blue', 'green')[unclass(Ecoworm$Location)], pch = 16, las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
levels(Ecoworm$Location),
col = c(('deeppink4', 'blue', 'darkslategray3'),
plot(pca$rotation, col = c('deeppink4', 'blue', 'darkslategray3')[unclass(Ecoworm$Location)], pch = 16, las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
levels(Ecoworm$Location),
col = c('deeppink4', 'blue', 'darkslategray3'),
pch = 16,
bty = 'n')
levels(Ecoworm$Location)###I used this to get the levels of the location and to know which colour refers to what
plot(pca$rotation, col = c('deeppink4', 'blue', 'darkslategray3')[unclass(Ecoworm$Location)], pch = 16, las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
levels(Ecoworm$Location),
col = c('deeppink4', 'blue', 'darkslategray3'),
pch = 16,
bty = 'n')
levels(Ecoworm$Location)###I used this to get the levels of the location and to know which colour refers to what
```
plot(pca$rotation, col = c('red', 'blue')[unclass(Ecoworm$Depth)], pch = c(16,4)[unclass(Ecoworm$Worm)], las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
c(levels(Ecoworm$Depth), levels(Ecoworm$Worm)),
col = c('red', 'blue'),
pch = c(15,15,16,4), ####15,15,15, refer to the three levels of location, 16,4 refer to the two levels of worm presence.
bty = 'n')
plot(pca$rotation, col = c('red', 'blue')[unclass(Ecoworm$Depth)], pch = c(16,4)[unclass(Ecoworm$Worm)], las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
c(levels(Ecoworm$Depth), levels(Ecoworm$Worm)),
col = c('red', 'blue'),
pch = c(15,15,16,4), ####15,15,15, refer to the three levels of location, 16,4 refer to the two levels of worm presence.
bty = 'n')
par(mfrow=c(2,2))
plot(mod3, which=c(1:4), add.smooth=FALSE, pch=20, las=1, col = c('deeppink4', 'blue', 'darkslategray3'))##normalQ-Q shows us that the data is normally distributed along the line, cooks distance shows outliers, rule of thumb: values above ten are outliers, th
plot(pca$rotation, col = c('red', 'blue', 'green')[unclass(Ecoworm$Location)], pch = c(16,4)[unclass(Ecoworm$Worm)], las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
c(levels(Ecoworm$Location), levels(Ecoworm$Worm)),
col = c('red', 'blue', 'green', 'lightgreen', 'lightblue'),
pch = c(15,15,15,16,4), ####15,15,15, refer to the three levels of location, 16,4 refer to the two levels of worm presence.
bty = 'n')
plot(pca$rotation, col = c('red', 'blue', 'green')[unclass(Ecoworm$Location)], pch = c(16,4)[unclass(Ecoworm$Worm)], las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
c(levels(Ecoworm$Location), levels(Ecoworm$Worm)),
col = c('red', 'blue', 'green', 'lightgreen', 'lightblue'),
pch = c(15,15,15,16,4), ####15,15,15, refer to the three levels of location, 16,4 refer to the two levels of worm presence.
bty = 'n')
plot(pca$rotation, col = c('deeppink4', 'blue', 'darkslategray3')[unclass(Ecoworm$Location)], pch = c(16,4)[unclass(Ecoworm$Worm)], las = 1) ### better PCA code, this one is centered, I gave three colour for three different Location factors, I did not know which colour represents which location
legend('bottomleft',
c(levels(Ecoworm$Location), levels(Ecoworm$Worm)),
col = c('deeppink4', 'blue', 'darkslategray3','black','black'),
pch = c(15,15,15,16,4), ####15,15,15, refer to the three levels of location, 16,4 refer to the two levels of worm presence.
bty = 'n')
for (OTU in 1:ncol(species_mat)){
x <- colnames(species_mat)[OTU]
y <- summary(lm((log(species_mat[,OTU]+1)~Ecoworm$Location+as.factor(Ecoworm$Depth)+Ecoworm$Worm)))
z <- cbind(LocationCAX<- y$coefficients[2,1], LocationCAX_p <- y$coefficients[2,4],
LocationUSA<- y$coefficients[3,1], LocationUSA_p <- y$coefficients[3,4],
Depth<- y$coefficients[4,1], Depth_p <- y$coefficients[4,4],
Worm<- y$coefficients[5,1], Worm_p <- y$coefficients[5,4],
R_sqaured <- y$r.squared)
z = as.data.frame(z)
if (OTU==1){
Anova_Results<-z
} else{
Anova_Results<-rbind(Anova_Results,z)
}
# print(y)
}
class(Anova_Results)
row.names(Anova_Results)<-colnames(species_mat)
colnames(Anova_Results)<-c('LocationCAX','LocationCAX_p','LocationUSA',"LocationUSA_p",'Depth',"Depth_p",'Worm','Worm_p','R_sqaured')
Anova_Results
Anova_Results$LocationCAX = as.numeric(as.matrix(Anova_Results$LocationCAX))
Anova_Results$LocationUSA = as.numeric(as.matrix(Anova_Results$LocationUSA))
Anova_Results$Depth = as.numeric(as.matrix(Anova_Results$Depth))
Anova_Results$Worm = as.numeric(as.matrix(Anova_Results$Worm))
Anova_Results$LocationCAXp = as.numeric(as.matrix(Anova_Results$LocationCAX_p))
Anova_Results$LocationUSAp = as.numeric(as.matrix(Anova_Results$LocationUSA_p))
Anova_Results$Depthp = as.numeric(as.matrix(Anova_Results$Depth_p))
Anova_Results$Wormp = as.numeric(as.matrix(Anova_Results$Worm_p))
par(mfrow=c(2,2))
plot(as.numeric(Anova_Results$LocationCAX), -log(as.numeric(Anova_Results$LocationCAX_p)), col=Ecoworm$Location)
plot(as.numeric(Anova_Results$LocationUSA), -log(as.numeric(Anova_Results$LocationUSA_p)), col=Ecoworm$Location)
plot(as.numeric(Anova_Results$Depth), -log(as.numeric(Anova_Results$Depth_p)), col=Ecoworm$Location)
plot(as.numeric(Anova_Results$Worm), -log(as.numeric(Anova_Results$Worm_p)), col=Ecoworm$Location)
Anova_Results$LocationCAX = as.numeric(as.matrix(Anova_Results$LocationCAX))
Anova_Results$LocationUSA = as.numeric(as.matrix(Anova_Results$LocationUSA))
Anova_Results$Depth = as.numeric(as.matrix(Anova_Results$Depth))
Anova_Results$Worm = as.numeric(as.matrix(Anova_Results$Worm))
Anova_Results$LocationCAXp = as.numeric(as.matrix(Anova_Results$LocationCAX_p))
Anova_Results$LocationUSAp = as.numeric(as.matrix(Anova_Results$LocationUSA_p))
Anova_Results$Depthp = as.numeric(as.matrix(Anova_Results$Depth_p))
Anova_Results$Wormp = as.numeric(as.matrix(Anova_Results$Worm_p))
par(mfrow=c(2,2))
plot(as.numeric(Anova_Results$LocationCAX), -log(as.numeric(Anova_Results$LocationCAX_p)), col=Ecoworm$Location)
plot(as.numeric(Anova_Results$LocationUSA), -log(as.numeric(Anova_Results$LocationUSA_p)), col=Ecoworm$Location)
plot(as.numeric(Anova_Results$Depth), -log(as.numeric(Anova_Results$Depth_p)), col=Ecoworm$Location)
plot(as.numeric(Anova_Results$Worm), -log(as.numeric(Anova_Results$Worm_p)), col=Ecoworm$Location)
LocationCAX_p_adjusted<-p.adjust(Anova_Results$LocationCAX_p, method="BH")
LocationUSA_p_adjusted<-p.adjust(Anova_Results$LocationUSA_p, method="BH")
Depth_p_adjusted<-p.adjust(Anova_Results$Depth_p, method="BH")
Worm_p_adjusted<-p.adjust(Anova_Results$Worm_p, method="BH")
length(Anova_Results$LocationCAX[LocationCAX_p_adjusted<0.05])##it is really uninportant which column I select, I compare"when CAX_p_adjusted is smaller than 0.05 keep whole row";;; so here we only pick the ones that are really Significant, the ones that still after adjusting have a p value of 0.05
length(Anova_Results$LocationCAX[LocationCAX_p_adjusted<0.05&LocationUSA_p_adjusted<0.05&Depth_p_adjusted<0.05&Worm_p_adjusted<0.05]) ###this only shows OTUs that are depenend on all the variables
CAX_depenend<-Anova_Results$LocationCAX[LocationCAX_p_adjusted<0.05] ###this only shows OTUs that are depenend on CAX
length(CAX_depenend)
USA_depenend<-Anova_Results$LocationCAX[LocationUSA_p_adjusted<0.05] ###this only shows OTUs that are depenend on USA
length(USA_depenend)
Depth_depenend<-Anova_Results$LocationCAX[Depth_p_adjusted<0.05] ###this only shows OTUs that are depenend on Depth
length(Depth_depenend)
Worm_depenend<-Anova_Results$LocationCAX[Worm_p_adjusted<0.05] ###this only shows OTUs that are depenend on Worm
length(Worm_depenend)
Worm_depenend
require(eulerr)
VENN = eulerr::euler(list(CAX=CAX_depenend, USA=USA_depenend,Depth =Depth_depenend,Worm = Worm_depenend))
VENN = eulerr::euler(list(location= unique(c(CAX_depenend,USA_depenend)),Depth =Depth_depenend,Worm = Worm_depenend))
plot(VENN)
VENN = eulerr::euler(list(CAX=CAX_depenend, USA=USA_depenend,Depth =Depth_depenend,Worm = Worm_depenend))
plot(VENN)
VENN = eulerr::euler(list(location= unique(c(CAX_depenend,USA_depenend)),Depth =Depth_depenend,Worm = Worm_depenend))
plot(VENN)
length(Anova_Results$LocationCAX[LocationCAX_p_adjusted<0.05&LocationUSA_p_adjusted<0.05&Depth_p_adjusted<0.05&Worm_p_adjusted<0.05]) ###this only shows OTUs that are depenend on all the variables
CAX_depenend<-Anova_Results$LocationCAX[LocationCAX_p_adjusted<0.05] ###this only shows OTUs that are depenend on CAX
length(CAX_depenend)
USA_depenend<-Anova_Results$LocationCAX[LocationUSA_p_adjusted<0.05] ###this only shows OTUs that are depenend on USA
length(Anova_Results$LocationCAX[LocationCAX_p_adjusted<0.05&LocationUSA_p_adjusted<0.05&Depth_p_adjusted<0.05&Worm_p_adjusted<0.05]) ###this only shows OTUs that are depenend on all the variables
CAX_depenend<-Anova_Results$LocationCAX[LocationCAX_p_adjusted<0.05] ###this only shows OTUs that are depenend on CAX
length(CAX_depenend)
USA_depenend<-Anova_Results$LocationCAX[LocationUSA_p_adjusted<0.05] ###this only shows OTUs that are depenend on USA
length(USA_depenend)
Depth_depenend<-Anova_Results$LocationCAX[Depth_p_adjusted<0.05] ###this only shows OTUs that are depenend on Depth
length(Depth_depenend)
Worm_depenend<-Anova_Results$LocationCAX[Worm_p_adjusted<0.05] ###this only shows OTUs that are depenend on Worm
length(Worm_depenend)
#EcoW.data<-read.table("back.to.roots.txt",header = TRUE) # read txt data.file
#attach (EcoW.data)
#fix(EcoW.data)
#write.csv2(EcoW.data, "EcoW-data.csv") # change to csv. data file
EcoW.data<-read.csv2("D:/Backup/Projekte/Ecoworm/Statistik/Michael/EcoW-data.csv",header = TRUE)
attach (EcoW.data)
###########################################################################################
#str(EcoW.data)
EcoW.data$Sample.ID[1]
EcoW.data$Sample.ID <- as.character(EcoW.data$Sample.ID)
# strsplit = string split, to break apart our original name over ; .
strsplit(EcoW.data$Sample.ID[1], split='[;]')
strsplit(EcoW.data$Sample.ID[1], split='[;]')[[1]]
# String split uses a doubly stacked matrix because it can never be sure that a given regex
# will have the same number of pieces. If there were more commas or periods in the name,
# it would create more segments, so it hides them a level deeper to maintain the rectangular types
# of containers that we are used to in things like spreadsheets, or now dataframes!
strsplit(EcoW.data$Sample.ID[1], split='[;]')[[1]][1]
EcoW.data$site.nr <- sapply(EcoW.data$Sample.ID, FUN=function(x) {strsplit(x, split='[;]')[[1]][1]})
EcoW.data$site.nr
strsplit(EcoW.data$Sample.ID[1], split='[;]')[[1]][2]
EcoW.data$Treatment <- sapply(EcoW.data$Sample.ID, FUN=function(x) {strsplit(x, split='[;]')[[1]][2]})
EcoW.data$Treatment
names(EcoW.data)
####################################################################################
spe1 <-EcoW.data[,7:561]  # EcoW.Cerco abundances
names(spe1)
env1<-EcoW.data[,c(3,5,6,562:563)]
# separate the row names
#ForestPCoA.env=EcoW.data[,5, drop = FALSE] # column 5 for Forest CAX CAK USA
#CountryPCoA.env=EcoW.data[,1, drop = FALSE] # column 1 for Country USA or CA
# still weird formatting in the data, to make them numeric you may need
spe1b = as.matrix(as.data.frame(lapply(spe1, as.numeric)))
########################################################
# cluster analysis to see if any samples are outliers
library(cluster)
#row.names(spe1b)<- spe1b$Sample.ID #re-establishes the row names
plotree <- hclust(vegdist(spe1b), "complete")
## Automatic reordering of clusters
plot (plotree)
rect.hclust(plotree, 4) # here: choose 5 separators
#######################################################
# any specific 'earthworm' communities?
dca <- decorana(spe1b)
tabasco(decostand(spe1b, "log"), dca)
######################################################
Cerco.spe<-spe1b
env1b<-env1[,c(2,5)]
Cerco.env<-env1b
library(vegan)
# Bray-Curtis Index
cerco.bray <- vegdist(Cerco.spe, method = "bray")
##################################################################################
## PERMANOVA
Perm_EcoW<-adonis(Cerco.spe ~ Forest*Depth*Worm, data=Cerco.env, permutations=999)
Forest <- Ecoworm[,7]
Depth<- Ecoworm[,6]
Worm<-Ecoworm[,5]
Perm_EcoW<-adonis(Cerco.spe ~ Forest*Depth*Worm, data=Cerco.env, permutations=999)
Perm_EcoW
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r setup, include=FALSE}
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
files = list.files(pattern="*Network.csv")
for ( i in 1:length(files)){
name = gsub(pattern = '_Network.csv',
replacement = '',
x = files[i])
### Filter the data in the loop
x = read.csv(files[i])
x = x[,c(1:3,5)]
x$wTO_sign = ifelse(x$pval_sig< 0.05, x$wTO_sign, 0)
assign(name, x)
}
setwd('D:/Backup/Projekte/Github/Wormland/')
#files = system('ls *Network.csv', intern = T)
files = list.files(pattern="*Network.csv")
for ( i in 1:length(files)){
name = gsub(pattern = '_Network.csv',
replacement = '',
x = files[i])
### Filter the data in the loop
x = read.csv(files[i])
x = x[,c(1:3,5)]
x$wTO_sign = ifelse(x$pval_sig< 0.05, x$wTO_sign, 0)
assign(name, x)
}
knitr::opts_chunk$set(echo = TRUE)
g <- graph_from_data_frame(USA10n)
require(igraph)
g <- graph_from_data_frame(USA10n)
deg.dist <- degree_distribution(g, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",
xlab="Degree", ylab="Cumulative Frequency")
deg.dist <- degree_distribution(g, cumulative=F, mode="all")
plot( x=0:max(degree(g)), y=1-deg.dist, pch=19, cex=1.2, col="orange",
xlab="Degree", ylab="Frequency")
knitr::opts_chunk$set(echo = TRUE)
plot(g, layout = igraph::layout_in_circle, vertex.label=NA)
